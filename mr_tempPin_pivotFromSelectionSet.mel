/* 
// ------------------------------------------------------------------------------ //
// SCRIPT: mr_tempPin_pivotFromSelectionSet.mel
// VERSION: 0002
//
// CREATORS: Maria Robertson
// ---------------------------------------
//
// DESCRIPTION: 
// Create a offset group pivot to pivot with from a predetermined object.
//
// The temp pivot is intended for use only on the current frame.
// There are two options buried in the script.
//
// option A -   Keep the offset group point constrained to the pivot object.
// 
// option B -   Remove constraints on the offset group.
//              This is better for pivoting a control around another on the same rig.
//                  e.g. pivoting the root around a head
//
// ---------------------------------------
// RUN COMMANDS:
// ---------------------------------------

mr_tempPin_create_followSelectionSet() ;
mr_tempPin_pivotFrom_followSelectionSet() ;

// ---------------------------------------
// CHANGELOG:
// 2023-04-11 - 0002
// Added two possible options to pivot with.
// ------------------------------------------------------------------------------ //
*/

//////////////////////////////////////////////////////////////////////////
// -------------------------------------------------------------------- //
//                                                                      //
//                      CREATE A SELECTION SET TO FOLLOW                //
//                                                                      //
// -------------------------------------------------------------------- //
//////////////////////////////////////////////////////////////////////////

global proc mr_tempPin_create_followSelectionSet() {
    
    // initialize variables
    string $objToFollowSetName = "objToFollowSet" ;

    // if nothing or more than one object is selected
    if (size(`ls -sl`) != 1) {     
        // give an error message
        // NOTE: make sure -title is unique, otherwise dialog won't trigger
        confirmDialog -title "Error A" -message "Select one object to remember to pivot from." ;
    } 
    
    else {
        // if the set already exists, delete it
        if(`objExists($objToFollowSetName)`){
            delete $objToFollowSetName ;
        }          

        // create a selection set from the selected object
        $objToFollowSet = `sets -n "objToFollowSet"`;  
    }
    
}

//////////////////////////////////////////////////////////////////////////
// -------------------------------------------------------------------- //
//                                                                      //
//                    TEMP PIVOT FROM SELECTION SET                     //
//                                                                      //
// -------------------------------------------------------------------- //
//////////////////////////////////////////////////////////////////////////

global proc mr_tempPin_pivotFrom_followSelectionSet() {

    // -------------------------------------------------------------------
    // 01. INITIALIZE VARIABLES
    // -------------------------------------------------------------------
     
    string $objToPivot[0] = `ls -sl` ;
    string $tempPivotOffsetGroupName = "TEMP_pivot_offset" ;

    string $objToFollowSetName = "objToFollowSet" ;  
    select -r objToFollowSet ;
    string $followObject[0] = `ls -sl` ;

    // If the selected object has any constraints, cancel procedure.
    string $constraints[] = `listConnections -type "constraint" $objToPivot[0]` ;
    string $uniqueConstraints[] = `stringArrayRemoveDuplicates $constraints` ;
    if (size($constraints) > 0) {
        confirmDialog -title "Error D" -message "Selected object has constraints." ;
        select $objToPivot[0] ;
        error "Selected objects have constraints, please remove them first." ;
    }
 
    // -------------------------------------------------------------------
    // 01. IF AN OFFSET GROUP ALREADY EXISTS, KEY THE TARGETS AND DELETE THE GROUP
    // -------------------------------------------------------------------
          
    // if an offset group already exists
    if (`objExists $tempPivotOffsetGroupName`) {
        
        // delete its connections
        delete -cn $tempPivotOffsetGroupName ;   
        // create array of its children
        string $tempPivotOffsetGroupChild[0] = `listRelatives -c $tempPivotOffsetGroupName` ;
       
        // set keys on its child
        select $tempPivotOffsetGroupChild ;
        FindConstraintTargets ;
        SetKeyTranslate ;
        SetKeyRotate ;
        
        // delete the offset group
        delete $tempPivotOffsetGroupName ;

        // end with Translate manipulator on
        buildTranslateMM ;
        destroySTRSMarkingMenu MoveTool ;
    }
    
    // -------------------------------------------------------------------
    // 01. IF AN OFFSET GROUP DOESN'T EXISTS, CREATE ONE AND SET-UP A TEMP PIVOT
    // -------------------------------------------------------------------

    // if the selection set exists
    else if (`objExists $objToFollowSetName`) {
              
        // -------------------------------------------------------------------
        // 02. CHECK SELECTION
        // -------------------------------------------------------------------       
         
        // if nothing or more than one object is selected
        if (size($objToPivot) != 1) {        
            // give an error message
            // NOTE: make sure -title is unique, otherwise dialog won't trigger
            confirmDialog -title "Error A" -message "Select one object to pivot from." ;
        }    
        
        // if the selection set object is selected as the pivot
        else if ($objToPivot[0] == $followObject[0]) {
            // give an error message
            confirmDialog -title "Error B" -message "Can't use an object marked to pivot from as the pivot." ;
        }
        
    
        // -------------------------------------------------------------------
        // 02. CREATE AN OFFSET GROUP TO PIVOT
        // -------------------------------------------------------------------       
        
        else {

            // create an offset group to pivot
            string $tempPivotOffsetGroup = `group -em -name $tempPivotOffsetGroupName` ;
            // set its transforms
            pointConstraint -w 1 $followObject[0] $tempPivotOffsetGroup ;
            orientConstraint -w 1 $followObject[0] $tempPivotOffsetGroup ;
            
            // NOTE: have to specifically name the constraint to delete, otherwise the null
            // group itself gets deleted too if "delete -cn" or "DeleteConstraints" is used     
            
            /*
            // option A - keep offset group's position connected
            delete ($tempPivotOffsetGroup + "_orientConstraint1") ;
            */
            
            // option B - delete all offset group  constraints. Can be better for pivotting around controls on same rig
            setKeyframe -at translate $tempPivotOffsetGroup  ;
            delete ($tempPivotOffsetGroup + "_orientConstraint1") ;
            delete ($tempPivotOffsetGroup + "_pointConstraint1") ;
            
            // create locator for the target object
            string $objToPivotLocator[0] = `spaceLocator -n ($objToPivot[0] + "_temp_pivot_loc")` ;
            // parent under the group to offset
            parent $objToPivotLocator $tempPivotOffsetGroup ;

            // parent constrain $objToPivotLocator to $objToPivot
            parentConstraint -w 1 $objToPivot[0] $objToPivotLocator[0] ;
            delete -cn $objToPivotLocator[0] ;
            
            // parent constrain $objToPivotLocator to $objToPivot
            parentConstraint -mo -w 1 $objToPivotLocator[0] $objToPivot[0] ;
            
            select $tempPivotOffsetGroup ;      

            // end with rotate manipulator active
            buildRotateMM ;     
            destroySTRSMarkingMenu RotateTool ;    
        }
    }


    
    // -------------------------------------------------------------------
    // 01. IF NO SELECTION SET EXISTS, GIVE A WARNING
    // -------------------------------------------------------------------

    // if both of the conditions don't exist
    else {

        // make sure -title is unique, otherwise dialog won't trigger
        confirmDialog -title "Error C" -message "Create a follow selection set first." ;  

    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
// -------------------------------------------------------------------- //
//                                                                      //
//                         SUPPORTING PROCEDURES                        //
//                                                                      //
// -------------------------------------------------------------------- //
//////////////////////////////////////////////////////////////////////////

// ------------------------------------------------------------------------------------------------------------------------------------------------

proc FindConstraintTargets() {
    
    string $queryTargets[] = `ls -sl`;
    // declare all constraint connections on selected
    string $connections[] = `listConnections -type "constraint" $queryTargets` ;
    // remove duplicate listings
    $connections = stringArrayRemoveDuplicates($connections) ;     
    
    // find the parent of each connection
    string $targets[] = `listRelatives -p $connections` ;
    // remove duplicate listings
    $targets = stringArrayRemoveDuplicates($targets) ;
    
    if (size($targets) == 0 ) {
        print "No targets found. \n" ;
    }  
    else {
        select $targets ;
    }

}