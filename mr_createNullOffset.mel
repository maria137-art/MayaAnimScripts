
// ------------------------------------------------------------------------------------------------------------------------------------------------
// SCRIPT: createNullOffsetFromSelected 
// VERSION: 0001
//
// CREATORS: Maria Robertson
// -------------------------------------------------------------------
//
// DESCRIPTION: 
// This script places selected objects in an offset group within their original hierarchy.
// The Offset group will match the selected object's translation and rotation, to zero out their values.
//
// EXAMPLE USES:
// Can be helpful when modifying rigs.
// Can't be used with referenced rigs.
//
// ------------------------------------------------------------------- 
//
// RUN COMMAND:
// CreateNullOffset() ;
//
// INSTRUCTIONS:
// It's best to run this on the original bind pose of the rig.
//
// REQUIREMENTS:
// Any requirements / prerequisites needed.
//
// -------------------------------------------------------------------
//
// RESEARCH THAT HELPED:
// For listing relatives
// https://forums.cgsociety.org/t/list-all-parents-of-an-object-mel/1806687/2
// 
// The endsWith command: https://help.autodesk.com/cloudhelp/2016/CHS/Maya-LT-Tech-Docs/Commands/endsWith.html
// Learnt of it because of this post: https://forums.autodesk.com/t5/maya-programming/selecting-all-polygon-objects-in-the-scene-with-a-certain-prefix/td-p/4240087
//
// ------------------------------------------------------------------------------------------------------------------------------------------------

global proc CreateNullOffset() {

    string $sel[] = `ls -sl` ;
    
    // -------------------------------------------------------------------
    // 01. CHECK IF SELECTION IS VALID
    // -------------------------------------------------------------------   
    
    // for every item selected
    for ($item in $sel) {
        
        // list its parent
        string $parent[0] = `listRelatives -ap $item` ;
            
        // check if item is already in a custom offset group
        if (endsWith ($parent[0],"_offset_grp")) {
            print "NOTE: The selected item is already in an offset_grp. \n" ;
            break ;
        }    
        
        // check if item itself is an offset group
        else if  (endsWith ($item,"_offset_grp")) {
            print "NOTE: The selected item is an offset group. \n" ;
            break ;
        }  
        
        else {
            
            // -------------------------------------------------------------------
            // 02. PREP
            // ------------------------------------------------------------------- 
            
            //making sure attrutes are unlocked for clean parenting
            setAttr -lock false ($item + ".tx") ;
            setAttr -lock false ($item + ".ty") ;
            setAttr -lock false ($item + ".tz") ;
            setAttr -lock false ($item + ".rx") ;
            setAttr -lock false ($item + ".ry") ;
            setAttr -lock false ($item + ".rz") ;
            
            // create group
            $null = `group -em -name ($item + "_offset_grp")` ;
            
            // match position
            parentConstraint -w 1 -n ($null + "_parentConstraint1") $item $null ;
            
            // delete constraint and place in hierarchy
            delete ($null + "_parentConstraint1") ;
            
            // -------------------------------------------------------------------
            // 02. PARENT NULLS
            // -------------------------------------------------------------------   
                 
            if (size($parent) == 0) {
                parent $item $null ;    
            }
            
            else {
                // parent them
                parent $null $parent[0] ;
                parent $item $null ;
            }
            
            // lock attributes of offset group
            setAttr -lock true ($null + ".tx") ;
            setAttr -lock true ($null + ".ty") ;
            setAttr -lock true ($null + ".tz") ;
            setAttr -lock true ($null + ".rx") ;
            setAttr -lock true ($null + ".ry") ;
            setAttr -lock true ($null + ".rz") ;
            setAttr -lock true ($null + ".sx") ;
            setAttr -lock true ($null + ".sy") ;
            setAttr -lock true ($null + ".sz") ;
            setAttr -lock true ($null + ".v") ;      
        }       
    }
}